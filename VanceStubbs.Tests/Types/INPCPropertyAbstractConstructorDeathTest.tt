<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace VanceStubbs.Tests.Types
{
    using System.ComponentModel;
    using System.Runtime.CompilerServices;

    public abstract class INPCPropertyAbstractConstructorDeathTest : INotifyPropertyChanged
    {
        protected INPCPropertyAbstractConstructorDeathTest(
            <#= string.Join(", ", Enumerable.Range(0, 10000).Select(i => $"int arg{i}")) #>)
        {
        }

        protected INPCPropertyAbstractConstructorDeathTest(int a)
        {
            this.NonAbstractButVirtual = a;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public abstract int Value { get; }

        public virtual int NonAbstractButVirtual { get; set; }

        public abstract int GetSet { get; set; }

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
